{"version":3,"sources":["components/Button/index.jsx","components/Card/index.jsx","components/modal/index.jsx","pages/api/index.js","pages/api/game/index.js","pages/api/ranking/index.js","pages/jogo/conquistas.js","components/ComoJogar/index.jsx","pages/api/categories/index.js","pages/api/word/index.js","assets/images/trofeu.svg","index.js","pages/home/index.jsx","pages/jogo/index.jsx","pages/admin/index.jsx","pages/categorias/index.jsx","pages/palavras/index.jsx","pages/ranking/index.jsx"],"names":["Button","props","className","Card","children","Modal","isOpen","onClose","hiddenCloseButton","style","display","onClick","api","axios","create","baseURL","getGameModeByCategory","categoryId","get","getGameModeByRandomWords","createPlayerInRanking","body","post","getRanking","conquistasDisponíveis","id","title","description","verificaSeConquistaNaoFoiFeita","idConquistaDisponivel","conquistas","some","conquista","ComoJogar","useState","setisOpen","getAllCategories","updateCategories","put","newCategory","deleteCategory","delete","getAllWord","updateWord","newWord","deleteWord","ReactDOM","render","StrictMode","path","exact","component","setIsOpen","modalContent","setModalContent","categoriaSelecionada","setCategoriaSelecionada","categorias","setCategorias","a","res","data","console","log","EscolherCategoria","value","onChange","e","target","map","categoria","name","to","Conquistas","filter","includes","ModalComponent","mode","useEffect","fetchCategorias","setCategoria","palavraEscondida","setPalavraEscondida","palavraCorreta","setPalavraCorreta","palavras","setPalavras","letrasDigitadas","setLetrasDigitadas","pontuação","setPontuação","letraAtual","setLetraAtual","erros","setErros","rodada","setRodada","isModalOpen","setIsModalOpen","seuNome","setSeuNome","shouldRedirect","setShouldRedirect","setConquistas","useParams","request","category","proximaRodada","mostraPalavraParaAcertar","palavra","novaPalavraEscondida","i","length","push","forEach","letra","acabarJogo","novaPalavraCorreta","player","score","achievements","error","pontosPorCadaLetra","fetchPalavrasByGameMode","achievement","find","conquistaDisponível","toast","verificaConquistas","disabled","_","index","word","toUpperCase","maxLength","form","setForm","newForm","idCategoria","onChangeInputEdit","event","add","onEditarCategoria","onExcluirCategoria","fetchPalavras","idPalavra","onEditarPalavra","onExcluirPalavra","ranking","setRanking","isOpenModal","setIsOpenModal","conquistasJogador","setConquistasJogador","filteredPlayers","sort","b","slice","fetchRanking","width","height","backgroundColor","margin","padding","mostraConquistas","src","trofeu","opacity","alt","document","getElementById"],"mappings":"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","file":"static/js/main.8535d1e8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './index.css'\r\n\r\nexport default function Button(props) {\r\n  return <button className='button' {...props} />;\r\n}\r\n","import React from \"react\";\r\nimport './style.css'\r\n\r\nexport function Card({ children }) {\r\n  return <div className='card'>{children}</div>;\r\n}\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nexport function Modal({ children, isOpen, onClose, hiddenCloseButton }) {\r\n  return (\r\n    <div className=\"modal\" style={{ display: isOpen ? \"unset\" : \"none\" }}>\r\n      <div className=\"modal-content\">\r\n        {children}\r\n        {!hiddenCloseButton && <button className='close' onClick={onClose}>X</button>}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import axios from 'axios'\r\n\r\nexport const api = axios.create({\r\n  baseURL: 'https://hangman-game-web-backend.herokuapp.com/api'\r\n})\r\n","import { api } from \"..\";\r\n\r\nexport const getGameModeByCategory = categoryId => api.get(`/words/mode/${categoryId}`)\r\nexport const getGameModeByRandomWords = () => api.get(`/words/mode/random`)\r\n","import { api } from \"..\";\r\n\r\nexport const createPlayerInRanking = (body) => api.post(\"/rankings\", body);\r\nexport const getRanking = () => api.get(\"/rankings\");\r\n","import { toast, ToastContainer } from \"react-toastify\";\r\n\r\nexport const conquistasDisponíveis = [\r\n  {\r\n    id: 30,\r\n    title: \"Caçador de zumbis.\",\r\n    description: \"Acertou vinte palavras consecutivas.\",\r\n  },\r\n  {\r\n    id: 12,\r\n    title: \"Corte limpo!\",\r\n    description: \"Acertou a palavra sem cometer nenhum erro.\",\r\n  },\r\n  {\r\n    id: 29,\r\n    title: \"Especialista em sobrevivência.\",\r\n    description: \"Acertou dez palavras consecutivas.\",\r\n  },\r\n  {\r\n    id: 11,\r\n    title: \"Foi nada! Só uma mordidinha...\",\r\n    description: \"Acertou a palavra depois de 5 erros.\",\r\n  },\r\n  {\r\n    id: 31,\r\n    title: \"Mais sorte na próxima vida...\",\r\n    description: \"Perdeu na primeira rodada.\",\r\n  },\r\n  {\r\n    id: 13,\r\n    title: \"Ninguém é perfeito.\",\r\n    description: \"Acertou a palavra depois de apenas 1 erro.\",\r\n  },\r\n  {\r\n    id: 27,\r\n    title: \"Sobrevivente iniciante.\",\r\n    description: \"Acertou quatro palavras consecutivas.\",\r\n  },\r\n  {\r\n    id: 25,\r\n    title: \"Sorte de iniciante.\",\r\n    description: \"Acertou duas palavras consecutivas.\",\r\n  },\r\n  {\r\n    id: 26,\r\n    title: \"Talvez não seja só sorte!\",\r\n    description: \"Acertou três palavras consecutivas.\",\r\n  },\r\n  {\r\n    id: 28,\r\n    title: \"Veterano de apocalipse.\",\r\n    description: \"Acertou cinco palavras consecutivas.\",\r\n  },\r\n];\r\n\r\nfunction verificaSeConquistaNaoFoiFeita(idConquistaDisponivel, conquistas) {\r\n  return !conquistas.some(\r\n    (conquista) => conquista.id === idConquistaDisponivel\r\n  );\r\n}\r\n\r\nexport function verificaConquistas(erros, conquistas, setConquistas, rodada) {\r\n  // Conquista 12\r\n  if (erros.length === 0 && verificaSeConquistaNaoFoiFeita(12, conquistas)) {\r\n    const achievement = conquistasDisponíveis.find(\r\n      (conquistaDisponível) => conquistaDisponível.id === 12\r\n    );\r\n    setConquistas([...conquistas, achievement]);\r\n\r\n    toast(\r\n      <div>\r\n        {achievement.title}\r\n        <br />\r\n        {achievement.description}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Conquista 25\r\n  if (rodada === 2 && verificaSeConquistaNaoFoiFeita(25, conquistas)) {\r\n    const achievement = conquistasDisponíveis.find(\r\n      (conquistaDisponível) => conquistaDisponível.id === 25\r\n    );\r\n    setConquistas([...conquistas, achievement]);\r\n\r\n    toast(\r\n      <div>\r\n        {achievement.title}\r\n        <br />\r\n        {achievement.description}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Conquista 26\r\n  if (rodada === 3 && verificaSeConquistaNaoFoiFeita(26, conquistas)) {\r\n    const achievement = conquistasDisponíveis.find(\r\n      (conquistaDisponível) => conquistaDisponível.id === 26\r\n    );\r\n    setConquistas([...conquistas, achievement]);\r\n\r\n    toast(\r\n      <div>\r\n        {achievement.title}\r\n        <br />\r\n        {achievement.description}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport Button from \"../Button\";\r\nimport { Modal } from \"../modal\";\r\nimport \"./index.css\";\r\n\r\nexport function ComoJogar() {\r\n  const [isOpen, setisOpen] = useState(false);\r\n\r\n  return (\r\n    <div className=\"como-jogar\">\r\n      <Button onClick={() => setisOpen(true)}>Como Jogar?</Button>\r\n      <Modal isOpen={isOpen} onClose={() => setisOpen(false)}>\r\n        <p>Para começar a jogar é muito simples:</p>\r\n        <p>- Clique em “Iniciar Jogo”.</p>\r\n        <p>\r\n          - Depois selecione uma categoria, caso você tenha medo de perder, para\r\n          jogar apenas com palavras de um tema específico. Mas se você quiser um\r\n          desafio digno de um(a) sobrevivente do Apocalipse Zumbi, escolha\r\n          “Categorias Aleatórias”.\r\n        </p>\r\n        <p>\r\n          - Coloque a letra que você quiser no campo correspondente e teste sua\r\n          sorte. Não esqueça de acentuar, caso seja necessário\r\n        </p>\r\n        <p>– não vamos facilitar pra você.</p>\r\n        <p>\r\n          - Para cada palavra correta, você ganhará 100 pontos. Caso você cometa\r\n          6 erros antes de completar a palavra, ganhará 5 pontos para cada letra\r\n          correta desta mesma rodada.\r\n        </p>\r\n        <p>\r\n          - Ao final da partida, você poderá registrar seu nome no ranking com\r\n          sua pontuação e conquistas.\r\n        </p>\r\n        <p>\r\n          Ah, já estava esquecendo... durante a partida, você pode acumular\r\n          conquistas com boas jogadas... ou não. Esforce-se para ficar entre os\r\n          dez primeiros lugares e mostrar para todos que você é um Caçador de\r\n          Zumbis.\r\n        </p>\r\n        <p></p>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import { api } from \"..\";\r\n\r\nexport const getAllCategories = () => api.get('/categories')\r\nexport const updateCategories = (id, body) => api.put(`/categories/${id}`, body)\r\nexport const newCategory = body => api.post(`/categories`, body)\r\nexport const deleteCategory = id => api.delete(`/categories/${id}`)\r\n","import { api } from \"..\";\r\n\r\nexport const getAllWord = () => api.get('/words')\r\nexport const updateWord = (id, body) => api.put(`/words/${id}`, body)\r\nexport const newWord = body => api.post(`/words`, body)\r\nexport const deleteWord = id => api.delete(`/words/${id}`)\r\n","export default __webpack_public_path__ + \"static/media/trofeu.9ce1eeac.svg\";","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport { Jogo } from \"./pages/jogo\";\r\nimport Admin from \"./pages/admin\";\r\nimport { Home } from \"./pages/home\";\r\nimport { Categorias } from \"./pages/categorias\";\r\nimport { Palavras } from \"./pages/palavras\";\r\nimport { Ranking } from \"./pages/ranking\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route path=\"/jogo-da-forca\" exact component={Home} />\r\n        <Route path=\"/jogo/:mode\" component={Jogo} exact />\r\n        <Route path=\"/admin\" component={Admin} />\r\n        <Route path=\"/categorias\" component={Categorias} />\r\n        <Route path=\"/palavras\" component={Palavras} />\r\n        <Route path=\"/ranking\" component={Ranking} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Button from \"../../components/Button\";\r\nimport { ComoJogar } from \"../../components/ComoJogar\";\r\nimport { Modal } from \"../../components/modal\";\r\nimport { getAllCategories } from \"../api/categories\";\r\nimport { conquistasDisponíveis } from \"../jogo/conquistas\";\r\nimport \"./index.css\";\r\n\r\nexport const Home = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [modalContent, setModalContent] = useState(\"\");\r\n  const [categoriaSelecionada, setCategoriaSelecionada] = useState(\"\");\r\n  const [categorias, setCategorias] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchCategorias();\r\n  }, []);\r\n\r\n  async function fetchCategorias() {\r\n    try {\r\n      const res = await getAllCategories();\r\n      setCategorias(res.data);\r\n      setCategoriaSelecionada(res.data[0].id);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  function EscolherCategoria() {\r\n    return (\r\n      <div className=\"game-mode\">\r\n        <select\r\n          value={categoriaSelecionada}\r\n          onChange={(e) => setCategoriaSelecionada(e.target.value)}\r\n        >\r\n          {categorias.map((categoria) => (\r\n            <option key={categoria.id} value={categoria.id}>\r\n              {categoria.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <div>\r\n          <Link to={`/jogo/${categoriaSelecionada}`}>\r\n            <Button>Jogar com categoria</Button>\r\n          </Link>\r\n        </div>\r\n        <Link to=\"/jogo/random\">\r\n          <Button>Jogar com categorias aleatórias</Button>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function Conquistas() {\r\n    return (\r\n      <div className=\"conquistas-home\">\r\n        {conquistasDisponíveis\r\n          .filter((conquista) => [12, 25, 26].includes(conquista.id))\r\n          .map(({ title, description }) => (\r\n            <div>\r\n              <div>{title}</div>\r\n              <div>{description}</div>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function ModalComponent({ mode }) {\r\n    switch (mode) {\r\n      case \"iniciar\":\r\n        return <EscolherCategoria />;\r\n      case \"conquistas\":\r\n        return <Conquistas />;\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Modal isOpen={isOpen} onClose={() => setIsOpen(false)}>\r\n        <ModalComponent mode={modalContent} />\r\n      </Modal>\r\n      <div className=\"container\">\r\n        <Link to=\"/admin\">\r\n          <p>Jogo da forca</p>\r\n        </Link>\r\n        <div className=\"buttons\">\r\n          <Button\r\n            onClick={() => {\r\n              setIsOpen(true);\r\n              setModalContent(\"iniciar\");\r\n            }}\r\n          >\r\n            Iniciar Jogo\r\n          </Button>\r\n          <Button\r\n            onClick={() => {\r\n              setIsOpen(true);\r\n              setModalContent(\"conquistas\");\r\n            }}\r\n          >\r\n            Conquistas\r\n          </Button>\r\n          <Link to=\"/ranking\">\r\n            <Button>Ranking</Button>\r\n          </Link>\r\n          <ComoJogar></ComoJogar>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link, Redirect, useParams } from \"react-router-dom\";\r\nimport Button from \"../../components/Button\";\r\nimport { Card } from \"../../components/Card\";\r\nimport { Modal } from \"../../components/modal\";\r\nimport { getGameModeByCategory, getGameModeByRandomWords } from \"../api/game\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { createPlayerInRanking } from \"../api/ranking\";\r\nimport { verificaConquistas } from \"./conquistas\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./style.css\";\r\n\r\nexport function Jogo() {\r\n  const [categoria, setCategoria] = useState([]);\r\n  const [palavraEscondida, setPalavraEscondida] = useState([]);\r\n  const [palavraCorreta, setPalavraCorreta] = useState([]);\r\n  const [palavras, setPalavras] = useState([]);\r\n  const [letrasDigitadas, setLetrasDigitadas] = useState([]);\r\n  const [pontuação, setPontuação] = useState(0);\r\n  const [letraAtual, setLetraAtual] = useState(\"\");\r\n  const [erros, setErros] = useState([]);\r\n  const [rodada, setRodada] = useState(0);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [seuNome, setSeuNome] = useState(\"\");\r\n  const [shouldRedirect, setShouldRedirect] = useState(false);\r\n  const [conquistas, setConquistas] = useState([]);\r\n\r\n  const { mode } = useParams();\r\n\r\n  useEffect(() => {\r\n    fetchPalavrasByGameMode();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    mostraPalavraParaAcertar(palavraCorreta);\r\n  }, [letrasDigitadas]);\r\n\r\n  useEffect(() => {\r\n    if (rodada !== 0) {\r\n      verificaConquistas(erros, conquistas, setConquistas, rodada);\r\n      setPontuação(pontuação + 100);\r\n\r\n      if (palavras.length <= rodada) {\r\n        setIsModalOpen(true);\r\n        return;\r\n      }\r\n      setCategoria(palavras[rodada].category.name);\r\n      proximaRodada(palavras[rodada].name);\r\n    }\r\n  }, [rodada]);\r\n\r\n  async function fetchPalavrasByGameMode() {\r\n    const request =\r\n      mode === \"random\"\r\n        ? getGameModeByRandomWords\r\n        : () => getGameModeByCategory(mode);\r\n    try {\r\n      const res = await request();\r\n      setPalavras(res.data);\r\n      setCategoria(res.data[rodada].category.name);\r\n      proximaRodada(res.data[rodada].name);\r\n    } catch (error) {}\r\n  }\r\n\r\n  async function mostraPalavraParaAcertar(palavra) {\r\n    const novaPalavraEscondida = [];\r\n    const erros = [];\r\n\r\n    for (let i = 0; i < palavra.length; i++) {\r\n      letrasDigitadas.includes(palavra[i])\r\n        ? novaPalavraEscondida.push(palavra[i])\r\n        : novaPalavraEscondida.push(\" \");\r\n    }\r\n\r\n    letrasDigitadas.forEach(\r\n      (letra) => !novaPalavraEscondida.includes(letra) && erros.push(letra)\r\n    );\r\n    setPalavraEscondida(novaPalavraEscondida);\r\n    setErros(erros);\r\n\r\n    if (erros.length === 6) {\r\n      acabarJogo();\r\n    }\r\n  }\r\n\r\n  function falarLetra() {\r\n    if (letrasDigitadas.includes(letraAtual)) {\r\n      return;\r\n    }\r\n    setLetrasDigitadas([...letrasDigitadas, letraAtual]);\r\n    setLetraAtual(\"\");\r\n  }\r\n\r\n  function verifyDisabledProximaPalavra() {\r\n    return palavraCorreta.some(\r\n      (letra, index) => palavraEscondida[index] !== letra\r\n    );\r\n  }\r\n\r\n  function proximaRodada(palavra) {\r\n    setLetrasDigitadas([]);\r\n    const novaPalavraCorreta = [];\r\n\r\n    for (let i = 0; i < palavra.length; i++) {\r\n      novaPalavraCorreta.push(palavra[i]);\r\n    }\r\n\r\n    setPalavraCorreta(novaPalavraCorreta);\r\n    mostraPalavraParaAcertar(palavra);\r\n  }\r\n\r\n  async function onFinalizarJogo() {\r\n    try {\r\n      await createPlayerInRanking({\r\n        player: seuNome,\r\n        score: pontuação,\r\n        achievements: conquistas.map((conquista) => ({ id: conquista.id })),\r\n      });\r\n\r\n      setShouldRedirect(true);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  function acabarJogo() {\r\n    const pontosPorCadaLetra =\r\n      palavraEscondida.filter((palavra) => palavra !== \" \").length * 5;\r\n\r\n    setPontuação(pontuação + pontosPorCadaLetra);\r\n    setIsModalOpen(true);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ToastContainer />\r\n      {shouldRedirect && <Redirect to=\"/ranking\" />}\r\n      <Modal\r\n        isOpen={isModalOpen}\r\n        onClose={() => setIsModalOpen(false)}\r\n        hiddenCloseButton\r\n      >\r\n        <div className=\"seu-nome\">\r\n          <div>\r\n            Digite seu nome:\r\n            <input\r\n              value={seuNome}\r\n              onChange={(e) => setSeuNome(e.target.value)}\r\n            ></input>\r\n          </div>\r\n          <Button disabled={!seuNome} onClick={onFinalizarJogo}>\r\n            GO\r\n          </Button>\r\n        </div>\r\n      </Modal>\r\n      <div className=\"jogo\">\r\n        Jogo\r\n        <div>\r\n          <div className=\"erros\">\r\n            <div>Qtd erros</div>\r\n            <div>\r\n              {erros.map((_, index) => (\r\n                <div key={index} className=\"erro\">\r\n                  X\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          <div className=\"palavra-escondida\">\r\n            <div>Categoria: {categoria}</div>\r\n            <div>\r\n              {palavraEscondida.map((word, index) => (\r\n                <Card key={word + \"palavra-escondida\" + index}>{word}</Card>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          <div className=\"botoes\">\r\n            <Button onClick={acabarJogo}>Desistir</Button>\r\n            <Button\r\n              onClick={() => setRodada(rodada + 1)}\r\n              disabled={verifyDisabledProximaPalavra()}\r\n            >\r\n              Próxima palavra\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <div className=\"letras-cantadas\">\r\n            <p>Letras já faladas</p>\r\n            <div>\r\n              {letrasDigitadas.map((word, index) => (\r\n                <Card key={word + \"letras-digitadas\" + index}>{word}</Card>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          <div className=\"digite-a-letra\">\r\n            Digite a letra\r\n            <input\r\n              value={letraAtual}\r\n              onChange={(e) => setLetraAtual(e.target.value.toUpperCase())}\r\n              maxLength={1}\r\n            ></input>\r\n            <Button disabled={!letraAtual} onClick={falarLetra}>\r\n              Falar\r\n            </Button>\r\n          </div>\r\n          <div className=\"pontuacao\">\r\n            Pontuação\r\n            <Card>{pontuação} pts</Card>\r\n          </div>\r\n        </div>\r\n        <Link to=\"/jogo-da-forca\">\r\n          <Button>Voltar</Button>\r\n        </Link>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Button from \"../../components/Button\";\r\nimport \"./index.css\";\r\n\r\nexport default function Admin() {\r\n  return (\r\n    <div className=\"admin\">\r\n      <Link to=\"/jogo-da-forca\">\r\n        <Button>Voltar</Button>\r\n      </Link>\r\n      <Link to=\"/categorias\">\r\n        <Button>Gerenciar Categorias</Button>\r\n      </Link>\r\n      <Link to=\"/palavras\">\r\n        <Button>Gerenciar Palavras</Button>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Button from \"../../components/Button\";\r\nimport {\r\n  deleteCategory,\r\n  getAllCategories,\r\n  newCategory,\r\n  updateCategories,\r\n} from \"../api/categories\";\r\nimport \"./index.css\";\r\n\r\nexport function Categorias() {\r\n  const [categorias, setCategorias] = useState([]);\r\n  const [form, setForm] = useState({});\r\n\r\n  useEffect(() => {\r\n    fetchCategorias();\r\n  }, []);\r\n\r\n  async function fetchCategorias() {\r\n    const newForm = {};\r\n    try {\r\n      const res = await getAllCategories();\r\n      setCategorias(res.data);\r\n      res.data.forEach((categoria) => {\r\n        newForm[categoria.name] = categoria.name;\r\n      });\r\n      setForm(newForm);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  async function onExcluirCategoria(idCategoria) {\r\n    try {\r\n      await deleteCategory(idCategoria);\r\n      await fetchCategorias();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  async function onEditarCategoria(categoria) {\r\n    try {\r\n      await updateCategories(categoria.id, {\r\n        name: form[categoria.name],\r\n      });\r\n\r\n      await fetchCategorias();\r\n    } catch (error) {}\r\n  }\r\n\r\n  function onChangeInputEdit(event) {\r\n    setForm({\r\n      ...form,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  }\r\n\r\n  async function onAddCategoria() {\r\n    try {\r\n      await newCategory({\r\n        name: form.add,\r\n      });\r\n      setForm({ add: \"\" });\r\n      await fetchCategorias();\r\n    } catch (error) {}\r\n  }\r\n\r\n  return (\r\n    <div className=\"categorias\">\r\n      <Link to=\"/admin\">\r\n        <Button>Voltar</Button>\r\n      </Link>\r\n      <table>\r\n        <tr>\r\n          <th>Categoria</th>\r\n          <th>Ações</th>\r\n        </tr>\r\n        {categorias.map((categoria) => {\r\n          return (\r\n            <tr key={categoria.name}>\r\n              <td>\r\n                <input\r\n                  name={categoria.name}\r\n                  value={form[categoria.name]}\r\n                  onChange={onChangeInputEdit}\r\n                />\r\n              </td>\r\n              <td>\r\n                <button\r\n                  disabled={categoria.name === form[categoria.name]}\r\n                  onClick={() => onEditarCategoria(categoria)}\r\n                >\r\n                  Editar\r\n                </button>\r\n                <button onClick={() => onExcluirCategoria(categoria.id)}>\r\n                  Excluir\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          );\r\n        })}\r\n        <tr>\r\n          <td>\r\n            <input name=\"add\" value={form.add} onChange={onChangeInputEdit} />\r\n          </td>\r\n          <td>\r\n            <button\r\n              disabled={categorias\r\n                .map((categoria) => categoria.name)\r\n                .includes(form.add)}\r\n              onClick={onAddCategoria}\r\n            >\r\n              Adicionar\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Button from \"../../components/Button\";\r\nimport { getAllCategories } from \"../api/categories\";\r\nimport { deleteWord, getAllWord, newWord, updateWord } from \"../api/word\";\r\nimport \"./index.css\";\r\n\r\nexport function Palavras() {\r\n  const [palavras, setPalavras] = useState([]);\r\n  const [categorias, setCategorias] = useState([]);\r\n  const [categoriaSelecionada, setCategoriaSelecionada] = useState(0);\r\n  const [form, setForm] = useState({});\r\n\r\n  useEffect(() => {\r\n    fetchPalavras();\r\n    fetchCategorias();\r\n  }, []);\r\n\r\n  async function fetchCategorias() {\r\n    const newForm = {};\r\n    try {\r\n      const res = await getAllCategories();\r\n      setCategorias(res.data);\r\n      setCategoriaSelecionada(res.data[0].id);\r\n      res.data.forEach((categoria) => {\r\n        newForm[categoria.name] = categoria.name;\r\n      });\r\n      setForm(newForm);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  async function fetchPalavras() {\r\n    const newForm = {};\r\n    try {\r\n      const res = await getAllWord();\r\n      setPalavras(res.data);\r\n      res.data.forEach((word) => {\r\n        newForm[word.name] = word.name;\r\n      });\r\n      setForm(newForm);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  async function onExcluirPalavra(idPalavra) {\r\n    try {\r\n      await deleteWord(idPalavra);\r\n      await fetchPalavras();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  async function onEditarPalavra(palavra) {\r\n    try {\r\n      await updateWord(palavra.id, {\r\n        name: form[palavra.name],\r\n      });\r\n      await fetchPalavras();\r\n    } catch (error) {}\r\n  }\r\n\r\n  function onChangeInputEdit(event) {\r\n    setForm({\r\n      ...form,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  }\r\n\r\n  async function onAddPalavra() {\r\n    try {\r\n      await newWord({\r\n        name: form.add,\r\n        category: {\r\n          id: categoriaSelecionada,\r\n        },\r\n      });\r\n      setForm({ add: \"\" });\r\n      await fetchPalavras();\r\n    } catch (error) {}\r\n  }\r\n\r\n  return (\r\n    <div className=\"palavras\">\r\n      <Link to=\"/admin\">\r\n        <Button>Voltar</Button>\r\n      </Link>\r\n      <table>\r\n        <tr>\r\n          <th>Categoria</th>\r\n          <th>Palavra</th>\r\n          <th>Ações</th>\r\n        </tr>\r\n        {palavras.map((palavra) => {\r\n          return (\r\n            <tr>\r\n              <td>\r\n                <input disabled value={palavra.category.name} />\r\n              </td>\r\n              <td>\r\n                <input\r\n                  name={palavra.name}\r\n                  value={form[palavra.name]}\r\n                  onChange={onChangeInputEdit}\r\n                />\r\n              </td>\r\n              <td>\r\n                <button\r\n                  disabled={palavra.name === form[palavra.name]}\r\n                  onClick={() => onEditarPalavra(palavra)}\r\n                >\r\n                  Editar\r\n                </button>\r\n                <button onClick={() => onExcluirPalavra(palavra.id)}>\r\n                  Excluir\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          );\r\n        })}\r\n        <tr>\r\n          <td>\r\n            <select\r\n              value={categoriaSelecionada}\r\n              onChange={(e) => setCategoriaSelecionada(e.target.value)}\r\n            >\r\n              {categorias.map((categoria) => (\r\n                <option value={categoria.id}>{categoria.name}</option>\r\n              ))}\r\n            </select>\r\n          </td>\r\n          <td>\r\n            <input name=\"add\" value={form.add} onChange={onChangeInputEdit} />\r\n          </td>\r\n          <td>\r\n            <button\r\n              disabled={palavras\r\n                .map((palavra) => palavra.name)\r\n                .includes(form.add)}\r\n              onClick={onAddPalavra}\r\n            >\r\n              Adicionar\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Button from \"../../components/Button\";\r\nimport { getRanking } from \"../api/ranking\";\r\nimport trofeu from \"../../assets/images/trofeu.svg\";\r\nimport { Modal } from \"../../components/modal\";\r\nimport \"./index.css\";\r\n\r\nexport function Ranking() {\r\n  const [ranking, setRanking] = useState([]);\r\n  const [isOpenModal, setIsOpenModal] = useState(false);\r\n  const [conquistasJogador, setConquistasJogador] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchRanking();\r\n  }, []);\r\n\r\n  async function fetchRanking() {\r\n    try {\r\n      const res = await getRanking();\r\n      const filteredPlayers = res.data\r\n        .sort((a, b) => b.score - a.score)\r\n        .slice(0, 10);\r\n      setRanking(filteredPlayers);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  function mostraConquistas(achievements) {\r\n    setConquistasJogador(achievements);\r\n    setIsOpenModal(true);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Modal isOpen={isOpenModal} onClose={() => setIsOpenModal(false)}>\r\n        <div className=\"conquistas\">\r\n          <div className=\"title\">Conquistas</div>\r\n          {conquistasJogador.map(({ title, description }) => {\r\n            return (\r\n              <div className=\"conquista\">\r\n                <div>{title}</div>\r\n                <div>{description}</div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </Modal>\r\n      <div className=\"ranking\">\r\n        <div className=\"lista\">\r\n          <div className=\"posicao\">\r\n            <div>Nome</div>\r\n            <div>Pontuação</div>\r\n            <div className=\"conquistas\">Conquistas</div>\r\n          </div>\r\n          <div\r\n            style={{\r\n              width: \"80%\",\r\n              height: \"2px\",\r\n              backgroundColor: \"white\",\r\n              margin: 10,\r\n            }}\r\n          ></div>\r\n          {ranking.map(({ player, score, achievements }, index) => {\r\n            return (\r\n              <div key={player + index} className=\"posicao\">\r\n                <div>{player}</div>\r\n                <div>{score}</div>\r\n                <div className=\"conquistas\">\r\n                  <Button\r\n                    disabled={!achievements.length}\r\n                    style={{ padding: 4 }}\r\n                    onClick={() => mostraConquistas(achievements)}\r\n                  >\r\n                    <img\r\n                      src={trofeu}\r\n                      style={{\r\n                        width: 30,\r\n                        opacity: `${!achievements.length ? \"0.3\" : 1}`,\r\n                      }}\r\n                      alt=\"trofeu\"\r\n                    />\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <Link to=\"/jogo-da-forca\">\r\n          <Button>Voltar</Button>\r\n        </Link>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"],"sourceRoot":""}